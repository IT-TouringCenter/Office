<?php
  namespace App\Facades\Tours;

  use Carbon\Carbon;
  use App\Repositories\DayTripRepository as DayTripRepository;

  use App\configuration_tour_price as configuration_tour_price;
  use App\tour_program as tour_program;

  class DayTripClass extends BaseClass{    
    private $daytrip = null;

    public function __construct(DayTripRepository $repo){
      $this->DayTripRepository= $repo;     
    }

    public function GetDayTripById($daytrip_id){          
      
      $this->tour_price_config = new configuration_tour_price;

      $daytrip = $this->GetDayTripGroupByProgramId($daytrip_id);
      if($daytrip ==null || $daytrip->count() <1) {
        return null;
      }

      $this->GetTourProgramById($daytrip[0]->tour_program_id);
      $this->GetCategoryById($daytrip);
      $this->GetTourType($daytrip);
      // $this->GetTourTravelingTime($daytrip[0]->tour_program_id);
      $this->GetGroupByPriveJoin($daytrip);

      return $this->tour_price_config;      
    }

    private function GetDayTripGroupByProgramId($daytrip_id){
      $id = 'tour_program_id';
      $value = $daytrip_id;

      $columns = ['tour_program_id'];            

      return $this->DayTripRepository
                  ->findBygroupBy($id,$value,$columns)
                  ->filter(function($item){
                      $date_now = Carbon::now();
                      return ($item->validity_start <= $date_now && $item->validity_stop >=$date_now);
                  });
    }

    private function GetTourProgramById($tour_program_id){
      if(empty($tour_program_id)){return null;}
    
      $tour_program= \TourProgramFacade::GetTourProgramById($tour_program_id);
      $this->MapTourProgramModelToObject($tour_program);
    }

    private function GetCategoryById($daytrip){
      $category = $daytrip[0]->tour_categorys;
      $this->MapTourCategoryModelToObject($category);
    }

    private function GetTourTravelingTime($tour_program_id){
      if(empty($tour_program_id)){return null;}

      $tour_traveling_time = \TourTravelingTimeFacade::GetTourTravelingTimeById($tour_program_id);
      $this->MapTourTravelingTimeToObject($tour_traveling_time);

      // $this->tour_program->times = $tour_traveling_time;
    }

    // Get type tour
    private function GetTourType($daytrip){
      $tour_type = $daytrip[0]->tour_type;
      $this->tour_price_config->id =$tour_type->id;
      $this->tour_price_config->type = $tour_type->type;
    } 

    // Get Price
    private function GetGroupByPriveJoin($daytrip){
      $attribute = 'tour_type_price_id';
      $columns = ['tour_type_price_id','validity_start','validity_stop'];
      $private_join= $this->DayTripRepository
                  ->groupBy($attribute,$columns)
                  ->filter(function($item){
                      $date_now = Carbon::now();
                      return ($item->validity_start <= $date_now && $item->validity_stop >=$date_now);
                  });
       
        $tour_type_prices = [];
        $program_id = $daytrip[0]->tour_program_id;
               
        foreach ($private_join as $value) {

          $tour_type_price = $this->GetTourTypePriceById($value->tour_type_price_id);         
          $tour_type_price_id = $tour_type_price[0]->id;  
          $tour_type = $tour_type_price[0]->type;

          $results = $this->GetPriceOfTransportPerPrivateAndJoin($program_id,$tour_type_price_id);//program_id=2,tour_program_id=[1:join, 2:private]
          
          array_push($tour_type_prices, ['id'=>$tour_type_price_id,'typePrice'=>$tour_type,'pricePerPaxCar'=>$results]);
        }
        $this->tour_price_config->priceByTypes=$tour_type_prices;
    }
    
    // Get Transport
    private function GetPriceOfTransportPerPrivateAndJoin($program_id,$tour_type_price_id){          
      $results = $this->DayTripRepository->GetPriceByTourTypePriceId($program_id,$tour_type_price_id);
      //return $results;

      $cars = [];
      foreach ($results as $value) {          
        if(!in_array($value->transportation_id,$cars)){
          array_push($cars,$value->transportation_id);
        };                    
      }

      // cars = [1],[1,2,3,4]
      $car_pax_price = $this->GetPaxForCar($program_id,$cars,$tour_type_price_id);

      return $car_pax_price;
    }

    private function GetPaxForCar($program_id,$cars,$tour_type_price_id){
      $results = [];

      // cars = [1],[1,2,3,4]
      foreach ($cars as $id) {        
        $transport = $this->GetTransport($id);

        $paxs_result = [];
        $paxs = $this->DayTripRepository->GetGroupPriceByProgramIdAndTransportId($program_id,$id,$tour_type_price_id);
        
        foreach ($paxs as $pax) {
          $pax_item= $this->GetPaxById($pax->pax_id);
          array_push($paxs_result,[
            'id'=>$pax->pax_id,
            'person'=>$pax_item,
            'sellAdultPrice'=>$pax->sell_price_adult,
            'sellChildPrice'=>$pax->sell_price_child,
            'singleRiding'=>$pax->extra_charge
          ]);
        }
       
        array_push($results,
          [
             'cars'=>[
               'id'=>$id,
               'car'=>$transport[0]->transportation
              ],//end car
             'paxs'=>$paxs_result            
          ]);
      }

      return $results;
    }

    private function GetTransport($transport_id){     
      $transport=  \TransportFacade::GetTransportById($transport_id);      
      return $transport;
    }

    private function GetPaxById($pax_id){
      $pax_result=  \PaxFacade::GetPaxById($pax_id);
      return $pax_result;
    }

    private function GetTourTypePriceById($id){
      return \TourTypePriceFacade::GetDataById($id);
    }
    
    // Map model to object
    public function MapTourProgramModelToObject($model){
      $this->tour_program = new configuration_tour_price;
      if($model==null || $model==''){
        $this->tour_price_config=null;
      }
      $this->tour_program->id = $model[0]->id;
      $this->tour_program->code = $model[0]->code;
      $this->tour_program->title = $model[0]->title;
      $this->tour_program->picture = $model[0]->image;
      $this->tour_program->link = $model[0]->link;
      // Tour Traveling Time
      $this->GetTourTravelingTime($model[0]->id);
      $this->tour_price_config->tour = $this->tour_program;
    }

    public function MapTourCategoryModelToObject($model){
      $this->category = new configuration_tour_price;
      $this->category->id = $model->id;
      $this->category->category = $model->category;
      $this->tour_price_config->category = $this->category;
    }

    public function MapTourTravelingTimeToObject($model){
      $traveling_time_arr = [];
        foreach($model as $value){
          $travel_time = new tour_program;
          $travel_time->id = $value->id;
          $travel_time->time = $value->traveling_time;
          array_push($traveling_time_arr,$travel_time);
        }
        $this->tour_program->times=$traveling_time_arr;
    }
  }
?>
