<?php
namespace App\Facades\Tours;

use App\Repositories\JobVacancyRepository as JobVacancyRepository;
use App\job_vacancy as job_vacancy;
use App\job_department as job_department;

class JobInformationClass extends BaseClass{  
  public function __construct(JobVacancyRepository $repo){
    $this->JobVacancyRepository = $repo;
  }

  public function GetJobInformationByDepartment($vacancy_id){
  	$job_information_repo = $this->JobVacancyRepository->findBy('id',$vacancy_id);
  	foreach($job_information_repo as $value){
  		$this->vacancy = new job_vacancy;
  		$this->vacancy->id = $value->id;
      if($value->job_type_id==4 || $value->job_type_id=='4'){
        $this->GetTypeByJobInterns($value->job_type_id); // get department
      }else{
  		  $this->GetDepartmentByJobVacancy($value->job_department_id);
      }
  		$this->GetTypeByJobVacancy($value->job_type_id);
  		$this->vacancy->position = $value->position;
  		$this->vacancy->note = $value->note;
  		$this->vacancy->notify = $value->notify;
  		$this->GetQualificationByDepartment($value->id);
  		$this->GetResponsibilityByDepartment($value->id);
  	}
    return $this->vacancy;
  }

  public function GetDepartmentByJobVacancy($department_id){
  	$department = \JobDepartmentFacade::GetJobDepartmentById($department_id);
    $department_arr = [];
    array_push($department_arr,$department);
  	$this->vacancy->department = $department_arr;
  }

  public function GetDepartmentByInterns($department_id){
    $department = \JobDepartmentFacade::GetJobDepartmentById($department_id);
    $department_arr = [];
    array_push($department_arr,$department);

    $division_arr = [];
    $position = $this->JobVacancyRepository->findBy('job_department_id',$department_id);
    foreach($position as $val){
      $this->position = new job_vacancy;
      $this->position->position = $val->position;
    }

    foreach($department_arr as $value){
      $this->division = new job_vacancy;
      $this->division->id = $value->id;
      $this->division->department = $value->department;
      $this->division->workplace = $value->workplace;
      $this->division->icon = $value->icon;
      $this->division->position = $this->position->position;
    }
    $this->type = $this->division;
  }

  public function GetTypeByJobVacancy($type_id){
  	$type = \JobTypeFacade::GetJobType($type_id);
  	$this->vacancy->type = $type[0];
  }

  public function GetTypeByJobInterns($type_id){
    $vacancy = $this->JobVacancyRepository->findBy('job_type_id',$type_id);
    $vacancy_arr = [];
    foreach($vacancy as $value){
      $this->type = new job_vacancy;
      $this->type->typeId = $value->job_type_id;
      // $this->type->departmentId = $value->job_department_id;
      $this->GetDepartmentByInterns($value->job_department_id);
      array_push($vacancy_arr,$this->type);
    }
    $this->vacancy->department = $vacancy_arr;

  }

  public function GetQualificationByDepartment($vacancy_id){
  	$qualification = \JobQualificationFacade::GetJobQualification($vacancy_id);
  	$qualification_arr = [];
  	foreach($qualification as $value){
  		$this->qualification = new job_vacancy;
  		$this->qualification->id = $value->id;
  		$this->qualification->qualification = $value->qualification;
  		array_push($qualification_arr,$this->qualification);
  	}
  	$this->vacancy->qualification = $qualification_arr;
  }

  public function GetResponsibilityByDepartment($vacancy_id){
  	$responsibility = \JobResponsibilityFacade::GetJobResponsibility($vacancy_id);
  	$responsibility_arr = [];
  	foreach($responsibility as $value){
  		$this->responsibility = new job_vacancy;
  		$this->responsibility->id = $value->id;
  		$this->responsibility->responsibility = $value->responsibility;
  		array_push($responsibility_arr,$this->responsibility);
  	}
  	$this->vacancy->responsibility = $responsibility_arr;
  }
}

?>
