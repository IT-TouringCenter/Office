<?php
namespace App\Facades\Tours;

use App\Repositories\JobVacancyRepository as JobVacancyRepository;
use App\job_vacancy as job_vacancy;
use App\job_department as job_department;
use App\job_type as job_type;
use App\job_qualification as job_qualification;
use App\job_responsibility as job_responsibility;

class JobVacancyClass extends BaseClass{  
  public function __construct(JobVacancyRepository $repo){
    $this->JobVacancyRepository = $repo;
  }

  public function GetJobs(){
  	$job_arr = [];
    $job_vacancy_repo = $this->JobVacancyRepository->GetDepartmentByVacancy();
    $job_interns_repo = $this->JobVacancyRepository->GetDepartmentByInterns();
    $this->jobs = new job_vacancy;
    $job_vacancy_arr = [];
    $job_interns_arr = [];

    // Vacancy --------------------------------------------------------------
      foreach($job_vacancy_repo as $value){
        $this->jobvacancy = new job_vacancy;
        $this->GetJobVacancy($value->id,$value->job_department_id);
        array_push($job_vacancy_arr,$this->jobvacancy);
      }
      $this->jobs->jobVacancies = $job_vacancy_arr;
    // Interns --------------------------------------------------------------
      foreach($job_interns_repo as $val){
        $this->jobinterns = new job_vacancy;
        $this->GetJobInterns($val->id,$val->job_department_id);
        array_push($job_interns_arr,$this->jobinterns);
      }
      $this->jobs->jobInterns = $this->jobinterns;
    return $this->jobs;
  }

  public function GetJobVacancy($id,$department_id){
    $this->vacancy = new job_vacancy;
    $this->GetDepartmentByJobVacancy($id,$department_id);
    $this->jobvacancy = $this->vacancy;
  }
  public function GetJobInterns($id,$department_id){
    $this->interns = new job_vacancy;
    $this->GetDepartmentByJobInterns($id,$department_id);
    $this->jobinterns = $this->interns;
  }

  // Department Vacancy
  public function GetDepartmentByJobVacancy($id,$department_id){
    $department = \JobDepartmentFacade::GetJobDepartmentById($department_id);
    $get_id_vacancy = $this->JobVacancyRepository->GetVacancyIdByDepartment($department_id);

    $this->classify = new job_department;
    $this->classify->id = $id;
    $this->classify->departments = $department;
    $this->classify->position = $get_id_vacancy[0]->position;
    foreach($get_id_vacancy as $val){
      $this->GetTypeByJobVacancy($val->job_type_id);
    }
    $this->vacancy = $this->classify;
  }

  // Department Interns
  public function GetDepartmentByJobInterns($id,$department_id){
    $department_arr = [];
    $get_department_interns = $this->JobVacancyRepository->GetDepartmentByInterns();
    foreach($get_department_interns as $value){
      $this->departments = new job_department;
      $this->departments->job_department_id = $value->job_department_id;
      array_push($department_arr,$this->departments);
    }
    $classify_arr = [];
    $get_id_interns = $this->JobVacancyRepository->GetInternsIdByDepartment($department_id);
    foreach($get_id_interns as $val){
      $this->classify = new job_department;
      foreach($department_arr as $vals){
        $classify = new job_vacancy;
        $get_classify = \JobDepartmentFacade::GetJobDepartmentById($vals->job_department_id);
        $classify = $get_classify;
        $classify->position = $this->JobVacancyRepository->GetInternsIdByDepartment($get_classify->id)[0]->position;
        array_push($classify_arr,$classify);
      }
      $this->classify->id = $id;
      $this->classify->departments = $classify_arr;
      $this->GetTypeByJobVacancy($val->job_type_id);
      $this->interns = $this->classify;
    }
  }

  // Type
  public function GetTypeByJobVacancy($type_id){
    $types = \JobTypeFacade::GetJobType($type_id);
    if(empty($types) || $types=='' || $types->count()<1){
      $this->classify->types = null;
    }else{
      foreach($types as $val){
        $this->type = new job_type;
        $this->type->id = $val->id;
        $this->type->type = $val->type;
      }
      $this->classify->types = $this->type;
    }
  }

}
?>